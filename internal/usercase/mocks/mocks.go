// Code generated by MockGen. DO NOT EDIT.
// Source: internal/usercase/weather_interface.go

// Package mock_usercase is a generated GoMock package.
package mock_usercase

import (
	reflect "reflect"
	time "time"
	entities "weather_api/internal/entities"

	gomock "github.com/golang/mock/gomock"
)

// MockWeatherService is a mock of WeatherService interface.
type MockWeatherService struct {
	ctrl     *gomock.Controller
	recorder *MockWeatherServiceMockRecorder
}

// MockWeatherServiceMockRecorder is the mock recorder for MockWeatherService.
type MockWeatherServiceMockRecorder struct {
	mock *MockWeatherService
}

// NewMockWeatherService creates a new mock instance.
func NewMockWeatherService(ctrl *gomock.Controller) *MockWeatherService {
	mock := &MockWeatherService{ctrl: ctrl}
	mock.recorder = &MockWeatherServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWeatherService) EXPECT() *MockWeatherServiceMockRecorder {
	return m.recorder
}

// CreateCities mocks base method.
func (m *MockWeatherService) CreateCities() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCities")
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateCities indicates an expected call of CreateCities.
func (mr *MockWeatherServiceMockRecorder) CreateCities() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCities", reflect.TypeOf((*MockWeatherService)(nil).CreateCities))
}

// CreateWeathers mocks base method.
func (m *MockWeatherService) CreateWeathers() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWeathers")
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateWeathers indicates an expected call of CreateWeathers.
func (mr *MockWeatherServiceMockRecorder) CreateWeathers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWeathers", reflect.TypeOf((*MockWeatherService)(nil).CreateWeathers))
}

// MockWeatherAPI is a mock of WeatherAPI interface.
type MockWeatherAPI struct {
	ctrl     *gomock.Controller
	recorder *MockWeatherAPIMockRecorder
}

// MockWeatherAPIMockRecorder is the mock recorder for MockWeatherAPI.
type MockWeatherAPIMockRecorder struct {
	mock *MockWeatherAPI
}

// NewMockWeatherAPI creates a new mock instance.
func NewMockWeatherAPI(ctrl *gomock.Controller) *MockWeatherAPI {
	mock := &MockWeatherAPI{ctrl: ctrl}
	mock.recorder = &MockWeatherAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWeatherAPI) EXPECT() *MockWeatherAPIMockRecorder {
	return m.recorder
}

// GetCities mocks base method.
func (m *MockWeatherAPI) GetCities() (entities.AllCities, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCities")
	ret0, _ := ret[0].(entities.AllCities)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCities indicates an expected call of GetCities.
func (mr *MockWeatherAPIMockRecorder) GetCities() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCities", reflect.TypeOf((*MockWeatherAPI)(nil).GetCities))
}

// GetDetaiWeatherInCity mocks base method.
func (m *MockWeatherAPI) GetDetaiWeatherInCity(name string, date time.Time) (entities.WeatherDetails, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDetaiWeatherInCity", name, date)
	ret0, _ := ret[0].(entities.WeatherDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDetaiWeatherInCity indicates an expected call of GetDetaiWeatherInCity.
func (mr *MockWeatherAPIMockRecorder) GetDetaiWeatherInCity(name, date interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDetaiWeatherInCity", reflect.TypeOf((*MockWeatherAPI)(nil).GetDetaiWeatherInCity), name, date)
}

// GetWeatherInCity mocks base method.
func (m *MockWeatherAPI) GetWeatherInCity(name string) (entities.WeatherPredict, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWeatherInCity", name)
	ret0, _ := ret[0].(entities.WeatherPredict)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWeatherInCity indicates an expected call of GetWeatherInCity.
func (mr *MockWeatherAPIMockRecorder) GetWeatherInCity(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWeatherInCity", reflect.TypeOf((*MockWeatherAPI)(nil).GetWeatherInCity), name)
}
